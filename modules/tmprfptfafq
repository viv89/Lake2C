# -*- coding: utf-8 -*-
"""
Created on Tue May 10 11:56:22 2022

@author: vija
"""

import numpy as np

class obj(object):
    '''
        A small class which can have attributes set
    '''
    pass

# Lake module
    
class lake:
    
    def __init__(self, lake_data, params, properties):
        
        
        # initialize objects
        self.data   = obj()    
        self.params = obj()
        self.properties = obj()
        
        # read data and parameters
        self.data.L      = lake_data['length']
        self.data.W      = lake_data['width']
        self.data.A_surf = lake_data['surf_area']
        self.data.h      = lake_data['depth']  
        self.data.ext_coeff = lake_data['extinction_coeff']
        
        self.params.nx   = params['nx']
        self.params.days = params['days']
        
        self.properties.rho_0 = properties['rho_0']
        self.properties.g     = properties['g']
        
        self.data.dx     = self.data.h/self.params.nx
        
        self.data.depth_range  = np.linspace(0,self.params.nx,self.params.nx)
        self.data.area_range  = np.linspace(self.data.A_surf,0,self.params.nx)

               
        # thermocline depth
        self.data.z_therm = self.thermocline_depth(self.data.L,self.data.W)
        # thermocline area
        self.data.A_therm = self.data.A_surf*(self.data.z_therm/self.data.h)
        
        # water volume of the lake
        self.data.V      = 1/3*self.data.A_surf*self.data.h
        # water volume of the hypolymnion
        self.data.V_hypo = 1/3*self.data.A_therm*self.data.z_therm
        # water volume of the epilymnion
        self.data.V_epi  = self.data.V - self.data.V_hypo 
        
        # light transmission through water column
        self.data.light_fraction = self.light_extinction(self.data.ext_coeff, 
                                                         self.data.depth_range)
        

    
    #--------------------------------------------------------------------------    
    # used inside this class -------------------------------------------------------    
        
    def thermocline_depth(self, L, W):
        #
        # Hanna M. (1990): Evaluation of Models predicting Mixing Depth. 
        # Can. J. Fish. Aquat. Sci. 47: 940-947
        #
        z_therm = 10**(0.336*np.log10(max(L,W))-0.245)
        return z_therm
    
    def light_extinction(self, ext_coeff, depth_range):
        light_fraction = 1 * np.exp(-ext_coeff*depth_range)
        return light_fraction
    
    def calc_dens(self, wtemp):
        dens = 999.842594 + (6.793952 * 1e-2 * wtemp) - (9.095290 * 1e-3 *wtemp**2) + (1.001685 * 1e-4 * wtemp**3) - (1.120083 * 1e-6* wtemp**4) + (6.536336 * 1e-9 * wtemp**5)
        return dens
    
    #--------------------------------------------------------------------------
    # used outside this class ------------------------------------------------------



    def eddy_diffusivity(self, rho):
        rho_0 = self.properties.rho_0
        g     = self.properties.g
        nx    = self.params.nx
        depth = self.data.depth_range
        buoy = np.ones(nx) * 7e-5
        for i in range(0, nx - 1):
            buoy[i] = np.sqrt( np.abs(rho[i+1] - rho[i]) / (depth[i+1] - depth[i]) * g/rho_0 )   
        low_values_flags = buoy < 7e-5  # Where values are low
        buoy[low_values_flags] = 7e-5
        kz = 0.00706 *( 3.8 * 1e1)**(0.56) * (buoy)**(-0.43)
        return kz

    def convection_surface(self, v0):
        # ------------inputs--------------
        # v0: average air velocity above surface (m/s)
        # bowen: Bowen's coefficient  
        # ------------outputs-------------
        # h0: sensible heat transfer coefficient due to convection (W/(m2 K))
        
        # Bowen coefficient: ratio between sensible and latent heat exchange at the surface of a water body (check units)
        # bowen = 0.46*(w_temp-air_temp)/(w_partpress-w_satwpress)*P/760
        bowen = 0.47
        h0 = bowen*(19.0 + 0.95 * v0**2) # W/(m2 K)?? <---to be converted
        return h0

    def saturated_pressure(self, air_temp):
        # maximum water vapor pressure (kPa) in the air at air_temp (°C)
        # Tetens equation (1930) adapted to t>0°C from Monteith and Unsworth (2008) 
        Psat = 0.61078*np.exp((17.27*air_temp)/(air_temp+237.3))
        return Psat